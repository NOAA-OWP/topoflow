S.D. Peckham
October 27-28, 2022
November 29, 2022 (updated)
December 3, 2022 (updated)
July 3, 2024 (updated)
August 30 (updated)

Note: This assumes that the NextGen repo has been installed.
      This work used the NextGen version 0.2 from 2022-07-27.

---------------
 Introduction
---------------
TopoFlow 3.6 consists of a set of hydrologic process components that
all expose the BMI interface.  The user chooses which component to use
for each hydrologic process and these must then somehow be coupled
together by some model coupling framework.  TopoFlow 3.6 contains its
own light-weight coupling framework called EMELI in the topoflow/framework
folder.  But TopoFlow components can also be coupled to create a
"composite" hydrologic model by the CSDMS framework (based on Python) or
by the NextGen framework (based on C++).

In order to simplify running the TopoFlow 3.6 model in NextGen, a new
feature was added in 2022 that allows a set of coupled TopoFlow components
to be presented to a model coupling framework as a single BMI component.
The code for this new feature is based on EMELI and is in a module called
multi_bmi.py, in the topoflow/framework folder of the TopoFlow 3.6 package.   
That is, the chosen BMI process components are "pre-coupled" by this
mechanism, so that NextGen sees the coupled set of BMI components
(or composite model) as a single BMI component.

In addition, the multi_bmi.py module contains a function called:
"prepare_tf_inputs()" that calls "topoflow/utils/prepare_inputs.py" and
(1) obtains a DEM for the chosen catchment by subsetting a "hydrofabric"
    DEM for all of CONUS that exists in an Amazon S3 bucket (This method
    uses the get_dem() method in the module:
       topoflow/utils/ngen/hydrofab_utils.py.)
(2) creates all of the other input files needed to run TopoFlow 3.6.
Step 2 uses and can subset AORC meteorological forcing files previously
downloaded in CSV format for the catchment from an Amazon S3 bucket. 

----------------------------------------------------------
 Steps to Run the TopoFlow 3.6 Python Package in NextGen
----------------------------------------------------------
(1) Download the latest TopoFlow 3.6 Python repo from:
    https://github.com/peckhams/topoflow36

(2) Copy the topoflow36 repo folder into the ngen project tree/repo at:
    ngen/extern/topoflow36

(3) Copy the files in the "ngen_files" subfolder into the corresponding
    locations in the ngen project tree (e.g. into ngen/data/topoflow, etc.)
    This includes input files for some example catchments, e.g. cat-209.
    The cat-209 catchment was used for my AGU 2022 NextGen poster.

(4) Download CSV forcing files from Amazon S3 bucket for catchments of
    interest.  If you have an account through Lynker, you can login to
    the AWS console at:
        https://lynker-aws.signin.aws.amazon.com/console 
    CSV files for HUC01 catchments are in the bucket: formulations-dev
    in the subfolder: forcings/huc01/csv.
    These CSV files provide AORC forcing/met data for the time span:
        2007-01-01 00:00:00 TO  2019-12-31 23:00:00 
    You can download a CSV file (e.g. cat-84.csv) from the AWS console
        and copy it into:   ngen/data/topoflow/forcing
    You can prepare dot files with your AWS credentials to access
        files in Lynker S3 buckets from a Python program.
    See comments in:  topoflow/utils/ngen/hydrofab_utils.py for details
    As of 2024-08, the module hydrofab_utils.py has new functions for
        downloading CSV files from the Lynker AWS buckets.
 
(5) In order to run TopoFlow for a catchment, the following files must
    exist in the folder:  ngen/data/topoflow/input_files/cat-**

     Note: These dirs must exist:  __met, __misc, __soil, __topo, Test1_cfg
     Note: Test1_cfg must contain:
           Test1_multi-bmi.cfg   (no need to edit)
           Test1_path_info.cfg   (Edit with correct path info.)
           Test1_time_info.cfg   (Edit with correct time info.)
     Note: There is a utility in topoflow/utils called prepare_inputs.py
           that can be used to generate these input files.  See the section
           below:  "How to Create TopoFlow Input Files for NextGen Catchments".

(6) Open a terminal window and set PYTHONPATH (for this session).
    For example:
    (base) % export PYTHONPATH='/Applications/anaconda3/envs/tf36/lib/python3.7/site-packages:/Users/peckhams/Dropbox/GitHub/ngen/extern/topoflow36'

    This adds the path to the topoflow package itself, as well as all of its
    dependencies from a conda environment called tf36.
 
    Note:  You can check that PYTHONPATH is set correctly via:
           (base) % python
           >>> import topoflow

(7) Change to ngen repo directory, e.g.:
     % cd ~/Dropbox/GitHub/ngen

(8) % ./cmake_build/ngen ./data/topoflow/spatial/catchment_data_HUC01.geojson "cat-84" ./data/topoflow/spatial/nexus_data_HUC01.geojson "" ./data/topoflow/rc_files/tf36_realization_config.json

    The output should look something like:

#### NextGen Output ####
NGen Framework 0.1.0
Building Nexus collection
Building Catchment collection
Catchment topology is dendridic.
Running Models
Running timestep 0
Running timestep 100
Running timestep 200
Running timestep 300
Running timestep 400
Running timestep 500
Running timestep 600
Running timestep 700
Finished 720 timesteps.

-------------------------------------------------------------
 How to Run TopoFlow for NextGen Catchments Without NextGen
-------------------------------------------------------------
Note:  This uses the "multi_bmi" approach described in the
       Introduction, similar to how TopoFlow runs in NextGen.
       But you can also run TopoFlow in the usual way once
       you have created all of the input files.

% python
>>> from topoflow import main2
>>> main2.run_model( cat_id_str='cat-209', SILENT=False )

------------------------------------------------------------
 How to Create TopoFlow Input Files for NextGen Catchments
------------------------------------------------------------
The easiest way to create the input files needed to run TopoFlow
for a NextGen catchment is to first run TopoFlow without NextGen,
using the method described in the previous section. The module:
topoflow/framework/multi_bmi.py will call the module:
topoflow/utils/prepare_inputs.py to do this prior to performing
the model run.  Input files will be created as follows:

(1) First, a DEM for the catchment (e.g. "cat-209") will be created
    by subsetting a hydrofabric DEM for CONUS that is in an Amazon
    S3 bucket.  This uses:  topoflow/utils/hydrofab_utils.py

(2) Next, a set of D8 grids will be computed automatically from the DEM:
        __topo/{{id}}_aspect.rtg,
        __topo/{{id}}_d8_area.rtg,
        __topo/{{id}}_flow.rtg
        __topo/{{id}}_sinu.rtg      #### CHECK
        __topo/{{id}}_slope.rtg

(3) Next, a set of "channel geometry grids" will be computed automatically
    from the TCA (total contributing area) grid.  This uses optional
    cfg_file parameters:
        max_river_width, channel_width_power,
        min_manning_n, max_manning_n,
        max_bankfull_depth, bankfull_depth_power
     to create the crids:
        __topo/{{id}}_chan-n.rtg   (Manning n grid)
        __topo/{{id}}_chan-w.rtg   (channel width grid)
        __topo/{{id}}_d0.rtg       (initial channel flow depth)
        __topo/{{id}}_d-bank.rtg   (bankfull depth grid)
        __topo/{{id}}_sinu.rtg      #### CHECK

      Note: Several "nudging factors" are now supported in CFG files:
            nval_factor, slope_factor, width_factor, d_bankfull_factor, etc.

(4) A set of CFG files, one for each TopoFlow process component are also
    computed automatically with default values.

---------------------------------------------------------------
 Notes about realization config files "rc files" for TopoFlow
---------------------------------------------------------------
A realization config file for running TopoFlow in NextGen is provided
in the "ngen_files" folder.  This section provides more information
about the various settings in that file.

(1) Set "name" in the formulations block to "bmi_python".

(2) Set "python_type" to "topoflow.main2.tf36_bmi",
    which has the form:  "package-name/module-name/class-name".

(3) Set "model_type_name" to "tf36_bmi", which is the model class name
    in the case where a topoflow composite model presents as a single BMI.

(4) Set "init_config" as the complete path to a TopoFlow "multi-bmi" config file.
    For example:
        "./data/topoflow/input_files/{{id}}/Test1_cfg/Test1_multi-bmi.cfg"
    Note: It can contain the regular expression "{{id}}" to match many files.    

(5) Set "main_output_variable" to
        "channel_water_x-section__volume_flow_rate"

(6) In the "variable_names_map" block, notice the lines:
      "streamflow_cms": "channel_water_x-section__volume_flow_rate",
      "atmosphere_water__precipitation_leq-volume_flux":"atmosphere_water__liquid_equivalent_precipitation_rate" 
    The second one maps the internal long variable name used by the model
    to the long variable name used by NextGen.
 
(7) In the "forcing" block, you no longer need to use a forcing file that
    only contains data for the time range of interest (start_time to end_time)
    and the regular expression {{id}} can be used in "file_pattern":
    For example:

    "file_pattern": "{{id}}.csv",
    "path": "./data/topoflow/forcing/huc01/",
    "provider": "CsvPerFeature"

(8) In the "time" block, make sure that "start_time" and "end_time" fall into
    the range that is spanned by entries in the CSV forcing file.
    Note: The module: topoflow/utils/mct_files.py contains a method for finding
          the wettest month in a NextGen AORC CSV forcing file.

-------------------------------------------------
 Some Error Messages Encountered Before Success
-------------------------------------------------
These are merely provided as a historical record.

1st console error message:

NGen Framework 0.1.0
Building Nexus collection
Building Catchment collection
libc++abi.dylib: terminating with uncaught exception of type std::__1::regex_error: One of *?+{ was not preceded by a valid regular expression.
zsh: abort      ./cmake_build/ngen ./data/topoflow/spatial/catchment_data_cat67.geojson

--------------------------------------------------------------------------------------------------
2nd console error message:

NGen Framework 0.1.0
Building Nexus collection
Building Catchment collection
libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Error opening forcing data dir './extern/topoflow36/data/{{id}}/__forcing/' after 1 attempts: No such file or directory.
zsh: abort      ./cmake_build/ngen ./data/topoflow/spatial/catchment_data_cat67.geojson    

--------------------------------------------------------------------------------------------------
3rd console error message:  (after changing "/{{id}}/" to "/cat-67/" in rc file)

NGen Framework 0.1.0
Building Nexus collection
Building Catchment collection
Importing TopoFlow 3.6 package modules:
   topoflow.utils
   topoflow.utils.tests
   topoflow.components
   topoflow.components.tests
   topoflow.framework
   topoflow.framework.tests
 
libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: ModuleNotFoundError: No module named 'osgeo'

At:
  /Users/peckhams/Dropbox/GitHub/ngen/extern/topoflow36/topoflow/utils/hydrofab_utils.py(35): <module>
  <frozen importlib._bootstrap>(219): _call_with_frames_removed
  <frozen importlib._bootstrap_external>(728): exec_module
  <frozen importlib._bootstrap>(677): _load_unlocked
  <frozen importlib._bootstrap>(967): _find_and_load_unlocked
  <frozen importlib._bootstrap>(983): _find_and_load
  <frozen importlib._bootstrap>(219): _call_with_frames_removed
  <frozen importlib._bootstrap>(1043): _handle_fromlist
  /Users/peckhams/Dropbox/GitHub/ngen/extern/topoflow36/topoflow/framework/multi_bmi.py(162): <module>
  <frozen importlib._bootstrap>(219): _call_with_frames_removed
  <frozen importlib._bootstrap_external>(728): exec_module
  <frozen importlib._bootstrap>(677): _load_unlocked
  <frozen importlib._bootstrap>(967): _find_and_load_unlocked
  <frozen importlib._bootstrap>(983): _find_and_load
  <frozen importlib._bootstrap>(219): _call_with_frames_removed
  <frozen importlib._bootstrap>(1043): _handle_fromlist
  /Users/peckhams/Dropbox/GitHub/ngen/extern/topoflow36/topoflow/main2.py(11): <module>
  <frozen importlib._bootstrap>(219): _call_with_frames_removed
  <frozen importlib._bootstrap_external>(728): exec_module
  <frozen importlib._bootstrap>(677): _load_unlocked
  <frozen importlib._bootstrap>(967): _find_and_load_unlocked
  <frozen importlib._bootstrap>(983): _find_and_load

zsh: abort      ./cmake_build/ngen ./data/topoflow/spatial/catchment_data_cat67.geojson 


--------------------------------------------------------------------------------------------------
4th console error message: (after adding to PYTHONPATH; see above)

...
...
Component with smallest time step is: tf_channels_diff_wave

Time interpolation method = Linear

Will print values every 0.5 seconds.
libc++abi.dylib: terminating with uncaught exception of type pybind11::error_already_set: TypeError: unhashable type: 'list'

At:
  /Users/peckhams/Dropbox/GitHub/ngen/extern/topoflow36/topoflow/framework/multi_bmi.py(691): get_output_var_names
  /Users/peckhams/Dropbox/GitHub/ngen/extern/topoflow36/topoflow/framework/multi_bmi.py(644): get_output_item_count

--------------------------------------------------------------------------------------------------
5th console error message: (after editing get_output_var_names())

Time =   43247.33 [min],  Q_out =    0.00002 [m^3/s]
Time =   43395.00 [min],  Q_out =    0.00001 [m^3/s]
Finished 720 timesteps.
ngen(48297,0x1137a5dc0) malloc: *** error for object 0xffffff00e63a5963: pointer being freed was not allocated
ngen(48297,0x1137a5dc0) malloc: *** set a breakpoint in malloc_error_break to debug

### NOTES:  It is not clear that bmi.finalize() is called.

--------------------------------------------------------------------------------------------------




